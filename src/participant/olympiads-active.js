async function ensureUserAuthenticated() {
  let userData = localStorage.getItem('user')

  if (!userData) {
    console.warn(
      'user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...'
    )
    const newAccessToken = await refreshAccessToken()
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç refreshAccessToken:', newAccessToken)

    if (!newAccessToken) {
      console.warn(
        'refreshAccessToken –≤–µ—Ä–Ω—É–ª null. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login.html'
      )
      window.location.href = '/index.html'
      return null
    }

    userData = localStorage.getItem('user')
    if (!userData) {
      console.warn('user –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –†–µ–¥–∏—Ä–µ–∫—Ç.')
      window.location.href = '/index.html'
      return null
    }
  }

  const user = JSON.parse(userData)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
  const role = user.profile?.role
  if (role !== 'participant') {
    console.warn(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é "${role}" –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –†–µ–¥–∏—Ä–µ–∫—Ç.`
    )
    window.location.href = '/index.html'
    return null
  }

  return user
}

async function loadUserProfile() {
  const res = await authorizedFetch(
    'https://portal.gradients.academy/api/users/participant/profile/'
  );
  if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
  return await res.json();
}

function renderUserInfo(profile) {
  const avatarEl   = document.getElementById('user-avatar');
  const nameEl     = document.getElementById('user-name');
  const roleEl     = document.getElementById('user-role');
  const welcomeEl  = document.querySelector('h1.text-xl');

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ: –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
  const imgPath = profile && profile.image ? profile.image : null;
  if (imgPath && typeof imgPath === 'string') {
    avatarEl.src = imgPath.startsWith('http')
      ? imgPath
      : `https://portal.gradients.academy${imgPath}`;
  } else {
    // –≤—Å—Ç–∞–≤—å —Ç—É—Ç —Å–≤–æ–π –ø—É—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–µ –∏–ª–∏ –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    avatarEl.src = '/src/assets/images/default-avatar.png'; // <- –ø–æ–º–µ–Ω—è–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  // –ò–º—è (–±–µ—Ä—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ: —Ä—É—Å—Å–∫–æ–µ, –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ, –ª–∏–±–æ fallback)
  const fullNameRu = (profile && (profile.full_name_ru || profile.full_name_en || profile.full_name)) || '';
  nameEl.textContent = fullNameRu || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  // –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–¥–µ–ª—è–µ–º firstName
  const firstName = fullNameRu ? fullNameRu.split(' ')[0] : '–ü—Ä–∏–≤–µ—Ç';
  welcomeEl.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} üëã`;

  // –†–æ–ª—å
  roleEl.textContent = '–£—á–∞—Å—Ç–Ω–∏–∫';
}


document.addEventListener('DOMContentLoaded', async () => {
  const user = await ensureUserAuthenticated()
  if (!user) return

  // —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è
  let profile
  try {
    profile = await loadUserProfile()
  } catch (e) {
    console.error(e)
    return
  }
  renderUserInfo(profile)

  try {
    await loadOlympiadCards()
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err)
  }
})



function formatDate(dateStr) {
    const months = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    const date = new Date(dateStr);
    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();
    return `${day} ${month} ${year}`;
    }


async function loadOlympiadCards() {
  const token = localStorage.getItem('access_token');
  if (!token) {
    alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  try {
    const response = await authorizedFetch('https://portal.gradients.academy/api/olympiads/participant/dashboard/?tab=active', {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥: ${response.status}`);

    const data = await response.json();

    const container = document.querySelector('.grid');
    container.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

    data.results.forEach(olympiad => {
      const card = document.createElement('div');
      card.className = 'border-default flex flex-col rounded-xl bg-white p-4';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
      let statusClass = '';
      if (olympiad.status == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') statusClass = 'bg-green-100 text-green-primary';
      if (olympiad.status == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞') statusClass = 'bg-orange-100 text-orange-primary';
      if (olympiad.status == '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å') statusClass = 'bg-red-100 text-red-primary';
      if (olympiad.status == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è') statusClass = 'bg-grey-100 text-grey-primary';
      if (olympiad.status == '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ') statusClass = 'bg-green-100 text-green-primary';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã
      if (olympiad.status == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') dateInfoText =`–î–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã`
      if (olympiad.status == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') dateInfo =`${formatDate(olympiad.first_start_date)} - ${formatDate(olympiad.last_end_date)}`;
      if (olympiad.status == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞') dateInfoText =`–û—Å—Ç–∞–ª–æ—Å—å`
      if (olympiad.status == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞') dateInfo =`${Math.round(Date(olympiad.last_end_date)-Date(olympiad.first_start_date))/ (1000 * 60 * 60 * 24)} –¥–Ω–µ–π`
      if (olympiad.status == '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å') dateInfoText =`–û—Å—Ç–∞–ª–æ—Å—å`
      if (olympiad.status == '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å') dateInfo =`${Math.round(Date(olympiad.last_end_date)-Date(olympiad.first_start_date))/ (1000 * 60 * 60 * 24)} –¥–Ω–µ–π`
      if (olympiad.status == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è') dateInfoText =`–û—Ç–∫—Ä–æ–µ—Ç—Å—è`
      if (olympiad.status == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è') dateInfo =`${oformatDate(olympiad.first_start_date)}`
      if (olympiad.status == '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ') dateInfoText =`–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è`
      if (olympiad.status == '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ') dateInfo =`${formatDate(olympiad.first_start_date)}`

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
      const buttonText = olympiad.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' ? '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';


    const useVuesaxIcon = ['–ó–∞–≤–µ—Ä—à–µ–Ω–∞', '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è'].includes(olympiad.status);
    const iconHTML = useVuesaxIcon
    ? `<img src="/src/assets/images/vuesax.svg" alt="vuesax" class="mb-1 inline-block size-5" />`
    : `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="mb-1 inline-block size-5">
    <path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm.75-13a.75.75 0 0 0-1.5 0v5c0 .414.336.75.75.75h4a.75.75 0 0 0 0-1.5h-3.25V5Z" clip-rule="evenodd"/>
    </svg>`;

      card.innerHTML = `
        <div class="${statusClass} mb-2 w-fit rounded-full px-2 py-1 text-xs">
          ${olympiad.status}
        </div>
        <h3 class="mb-1 text-lg font-semibold">${olympiad.title}</h3>
        <p class="text-gray-primary mb-3 text-sm">–¢—É—Ä: ${olympiad.tour_type}</p>
        <div class="mt-auto mb-4 flex">
          <div>
            <span class="text-gray-secondary mb-1 text-xs">${dateInfoText}</span>

<p class="text-black-primary text-sm">${iconHTML}

              ${dateInfo}
            </p>
          </div>
        </div>
        <a href="${olympiad.url}" class="btn-base">${buttonText}</a>
      `;

      container.appendChild(card);
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥:', error);
  }
}
