async function ensureUserAuthenticated() {
  let userData = localStorage.getItem('user')

  if (!userData) {
    console.warn(
      'user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...'
    )
    const newAccessToken = await refreshAccessToken()
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç refreshAccessToken:', newAccessToken)

    if (!newAccessToken) {
      console.warn(
        'refreshAccessToken –≤–µ—Ä–Ω—É–ª null. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login.html'
      )
      window.location.href = '/index.html'
      return null
    }

    userData = localStorage.getItem('user')
    if (!userData) {
      console.warn('user –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –†–µ–¥–∏—Ä–µ–∫—Ç.')
      window.location.href = '/index.html'
      return null
    }
  }

  const user = JSON.parse(userData)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
  const role = user.profile?.role
  if (role !== 'administrator') {
    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é "${role}" –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ. –†–µ–¥–∏—Ä–µ–∫—Ç.`)
    window.location.href = '/index.html'
    return null
  }

  return user
}

function renderUserInfo(user) {
  const avatarEl = document.getElementById('user-avatar')
  const nameEl = document.getElementById('user-name')
  const roleEl = document.getElementById('user-role')
  const welcomeEl = document.querySelector('h1.text-xl')

  const imgPath = user.profile.image
  avatarEl.src = imgPath.startsWith('http')
    ? imgPath
    : `https://portal.gradients.academy${imgPath}`

  nameEl.textContent = user.profile.full_name_ru
  const firstName = user.profile.full_name_ru.split(' ')[0]
  welcomeEl.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} üëã`

  const roleMap = {
    administrator: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  }
  roleEl.textContent = roleMap[user.profile.role] || user.profile.role
}

document.addEventListener('DOMContentLoaded', async () => {
  const user = await ensureUserAuthenticated()
  if (!user) return

  renderUserInfo(user)

  try {
    await loadOlympiads()

    let sortAscending = true

    const sortHeader = document.getElementById('sort-year-header')
    const sortHeader2 = document.getElementById('sort-id-header')
    const sortHeader3 = document.getElementById('sort-tour-header')
    const sortHeader4 = document.getElementById('sort-participant-header')
    if (sortHeader) {
    sortHeader.addEventListener('click', () => {
      allOlympiads.sort((a, b) => {
        const A = a.year
        const B = b.year
        return sortAscending ? A - B : B - A
      })
      sortAscending = !sortAscending
      renderPaginatedTable()
    })}

        if (sortHeader2) {
    sortHeader2.addEventListener('click', () => {
      allOlympiads.sort((a, b) => {
        const A = a.id
        const B = b.id
        return sortAscending ? A - B : B - A
      })
      sortAscending = !sortAscending
      renderPaginatedTable()
    })}


    let sortDescriptionAsc = true

            if (sortHeader3) {
    sortHeader3.addEventListener('click', () => {
      allOlympiads.sort((a, b) => {
        const descA = a.type.toLowerCase()
        const descB = b.type.toLowerCase()
        return sortDescriptionAsc ? descA.localeCompare(descB) : descB.localeCompare(descA)

      })
      sortDescriptionAsc = !sortDescriptionAsc
      renderPaginatedTable()
    })}

            if (sortHeader4) {
    sortHeader4.addEventListener('click', () => {
      allOlympiads.sort((a, b) => {
        const A = a.participant_count
        const B = b.participant_count
        return sortAscending ? A - B : B - A
      })
      sortAscending = !sortAscending
      renderPaginatedTable()
    })}

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err)
  }
})

async function loadOlympiads() {
  const token = localStorage.getItem('access_token')
  if (!token) {
    alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    return
  }

  try {
    const response = await authorizedFetch(
      'https://portal.gradients.academy/olympiads/dashboard/',
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`)
    }

    const data = await response.json()
    console.log(data.results) // <-- –í—Å—Ç–∞–≤—å –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    renderOlympiadTable(data.results)
    allOlympiads = data.results
    filteredOlympiads = allOlympiads
    renderPaginatedTable()
    setupFilters()
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ª–∏–º–ø–∏–∞–¥:', err)
    document.getElementById('olympiads-tbody').innerHTML = `
      <tr><td colspan="8" class="text-center text-red-500 py-4">${err.message}</td></tr>
    `
  }
}

function renderOlympiadTable(olympiads) {
  const tbody = document.getElementById('olympiads-tbody')
  if (!tbody) return

  tbody.innerHTML =
    olympiads.length === 0
      ? `<tr><td colspan="8" class="text-center text-gray-500 py-4">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>`
      : olympiads
          .map(
            (ol) => `
      <tr class="hover:bg-gray-50">
        <td>${ol.id}</td>
        <td>${ol.title}</td>
        <td>${getSeasonLabel(ol.type)}</td>
        <td>${ol.grades.join(', ')}</td>
        <td>${ol.year}</td>
        <td>${ol.participant_count}</td>
        <td>
          <span class="card ${getStatusClass(ol.status)}">${getStatusLabel(ol.status)}</span>
        </td>
        <td>
          <div class="flex justify-between gap-2 *:cursor-pointer">
            <button onclick="openDeleteModal('${ol.title}', ${ol.id})" class="text-gray-400 hover:text-red-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
            <button onclick="openEditModal('${ol.title}', ${ol.id})" class="text-gray-400 hover:text-blue-primary">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
              </svg>
            </button>
          </div>
        </td>
      </tr>
    `
          )
          .join('')
}

function getSeasonLabel(type) {
  const map = {
    spring: 'üå∏ –í–µ—Å–Ω–∞',
    summer: 'üåç –õ–µ—Ç–æ',
    autumn: 'üçÇ –û—Å–µ–Ω—å',
    winter: '‚ùÑÔ∏è –ó–∏–º–∞',
  }
  return map[type] || type
}

function getStatusLabel(status) {
  const map = {
    ongoing: '–ò–¥—ë—Ç —Å–µ–π—á–∞—Å',
    finished: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    upcoming: '–°–∫–æ—Ä–æ',
  }
  return map[status] || status
}

function getStatusClass(status) {
  const map = {
    ongoing: 'ongoing',
    finished: 'finished',
    upcoming: 'upcoming',
  }
  return map[status] || ''
}

async function updateTotalCountAndPagination() {
  const params = new URLSearchParams()

  if (currentFilters.search) params.append('search', currentFilters.search)
  if (currentFilters.country) params.append('country', currentFilters.country)
  if (currentFilters.role) params.append('role', currentFilters.role)
  if (currentFilters.grade) params.append('grade', currentFilters.grade)

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π page_size, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ —á–∏—Å–ª–æ
  params.append('page', 1)
  params.append('page_size', 50)

  const url = `https://portal.gradients.academy/users/dashboard/?${params.toString()}`
  const res = await authorizedFetch(url)

  if (!res.ok)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

  const users = await res.json()
  totalUserCount = users.length

  document.getElementById('total-users-count').textContent = totalUserCount

  renderPaginationControls(totalUserCount)
}

let allOlympiads = []

function setupFilters() {
  document
    .getElementById('search-olympiads')
    .addEventListener('input', applyFilters)
  document
    .getElementById('filter-class')
    .addEventListener('change', applyFilters)
  document
    .getElementById('filter-status')
    .addEventListener('change', applyFilters)
}

function applyFilters() {
  const search = document.getElementById('search-olympiads').value.toLowerCase()
  const selectedClass = document.getElementById('filter-class').value
  const selectedStatus = document.getElementById('filter-status').value

  filteredOlympiads = allOlympiads.filter((ol) => {
    const matchesSearch =
      ol.title.toLowerCase().includes(search) || String(ol.id).includes(search)
    const matchesClass = selectedClass
      ? ol.grades.includes(Number(selectedClass))
      : true
    const matchesStatus = selectedStatus ? ol.status === selectedStatus : true
    return matchesSearch && matchesClass && matchesStatus
  })

  currentPage = 1
  renderPaginatedTable()
}

let currentPage = 1
const pageSize = 10

function renderPaginatedTable() {
  const start = (currentPage - 1) * pageSize
  const end = start + pageSize
  const pageData = filteredOlympiads.slice(start, end)

  document.getElementById('total-olympiad-count').textContent =
    filteredOlympiads.length

  renderOlympiadTable(pageData)
  renderPagination()
}

function renderPagination() {
  const container = document.querySelector('.pagination')
  if (!container) return

  const totalPages = Math.max(1, Math.ceil(filteredOlympiads.length / pageSize)) // üëà –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º—É–º 1

  let buttons = ''

  for (let i = 1; i <= totalPages; i++) {
    buttons += `
      <button class="${i === currentPage ? 'text-orange-primary border-orange-primary border' : 'text-gray-600'} px-3 py-1 rounded"
        onclick="goToPage(${i})">${i}</button>
    `
  }

  container.innerHTML = `
    <div class="flex items-center gap-1">
      <button onclick="goToPage(${Math.max(1, currentPage - 1)})" class="px-3 py-1">‚Üê</button>
      ${buttons}
      <button onclick="goToPage(${Math.min(totalPages, currentPage + 1)})" class="px-3 py-1">‚Üí</button>
    </div>
  `
}

function goToPage(page) {
  currentPage = page
  renderPaginatedTable()
}

function openDeleteModal(title, id) {
  olympiadIdToDelete = id

  const modal = document.getElementById('modalDel')
  const overlay = document.getElementById('overlayModal')
  const nameSpan = document.getElementById('olympiad-name-to-delete')

  if (nameSpan) {
    nameSpan.textContent = `"${title}"`
  }

  modal.classList.remove('hidden')
  overlay.classList.remove('hidden')
}

let olympiadIdToDelete = null

async function deleteOlympiad() {
  if (!olympiadIdToDelete) return

  const token = localStorage.getItem('access_token')
  if (!token) {
    alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    return
  }

  const olympiad = allOlympiads.find((ol) => ol.id === olympiadIdToDelete)
  if (olympiad?.status === 'finished') {
    alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É.')
    return
  }

  try {
    const response = await fetch(
      `https://portal.gradients.academy/olympiads/dashboard/${olympiadIdToDelete}`,
      {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${response.status}`)
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    allOlympiads = allOlympiads.filter((ol) => ol.id !== olympiadIdToDelete)
    applyFilters() // –æ–±–Ω–æ–≤–∏—Ç filteredOlympiads –∏ —Ç–∞–±–ª–∏—Ü—É

    closeModal('modalDel')
    closeModal('modalEdit')
  } catch (err) {
    alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã: ${err.message}`)
  }
}

function closeModal(id) {
  const modal = document.getElementById(id)
  const overlay = document.getElementById('overlayModal')

  if (modal) modal.classList.add('hidden')
  if (overlay) overlay.classList.add('hidden')
}

async function openEditModal(title, id) {
  olympiadIdToDelete = id
  const modal = document.getElementById('modalEdit')
  const overlay = document.getElementById('overlayModal')

  try {
    const token = localStorage.getItem('access_token')
    const response = await fetch(`https://portal.gradients.academy/olympiads/dashboard/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã: ${response.status}`)
    }

    const data = await response.json()

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    document.getElementById('name-edit').value = data.title
    document.getElementById('tour-edit').value = {
      spring: '–í–µ—Å–Ω–∞',
      summer: '–õ–µ—Ç–æ',
      autumn: '–û—Å–µ–Ω—å',
      winter: '–ó–∏–º–∞',
    }[data.type] || '–í–µ—Å–Ω–∞'
    document.getElementById('year-edit').value = data.year
    document.getElementById('status-edit').value = data.status
    document.getElementById('link-edit').value = data.website || ''
    document.getElementById('price').value = data.cost || ''
    document.getElementById('disc-edit').value = data.description || ''

    // –ö–ª–∞—Å—Å—ã
    const gradesSelect = document.getElementById('grades-edit')
    Array.from(gradesSelect.options).forEach(option => {
      option.selected = data.grades.includes(parseInt(option.value))
    })

    const stageTemplate = document.getElementById('stage-template-edit')
    const stageContainer = stageTemplate.parentElement
    const addButton = stageContainer.querySelector('.btn-white')

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–æ–Ω—ã, –∫—Ä–æ–º–µ —à–∞–±–ª–æ–Ω–∞
    stageContainer.querySelectorAll('.grid:not(#stage-template-edit)').forEach(el => el.remove())

    if (data.stages.length > 0) {
      stageTemplate.classList.add('hidden') // —Å–∫—Ä—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω

      data.stages.forEach(stage => {
        const clone = stageTemplate.cloneNode(true)
        clone.removeAttribute('id')
        clone.classList.remove('hidden')
        clone.querySelector('.step-name-add').value = stage.name
        clone.querySelector('.date-range-add').value = `${formatDateReverse(stage.start_date)} ‚Äî ${formatDateReverse(stage.end_date)}`
        stageContainer.insertBefore(clone, stageTemplate.nextSibling)
        flatpickr(clone.querySelector('.date-range-add'), {
          mode: 'range',
          dateFormat: 'd.m.Y',
          locale: flatpickr.l10ns.ru,
        })
      })
    } else {
      stageTemplate.classList.remove('hidden') // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ —ç—Ç–∞–ø–æ–≤ –Ω–µ—Ç
    }


    // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    if (data.certificate_template) {
      document.getElementById('title_certificate-add').value = data.certificate_template.header_text || ''
      document.getElementById('sign-add').value = data.certificate_template.signature_1 || ''
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è –ø–æ–¥–ø–∏—Å—å ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    }

    modal.classList.remove('hidden')
    overlay.classList.remove('hidden')
  } catch (err) {
    alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ª–∏–º–ø–∏–∞–¥—ã: ${err.message}`)
  }
}

function formatDateReverse(dateStr) {
  const [y, m, d] = dateStr.split('-')
  return `${d}.${m}.${y}`
}





async function submitOlympiadForm() {
  const token = localStorage.getItem('access_token')
  if (!token) {
    alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    return
  }

  const formData = new FormData()

  // üìå –û–±—â–∏–µ –ø–æ–ª—è
  const title = document.getElementById('title-add')?.value
  const status = document.getElementById('status-add')?.value
  const typeLabel = document.getElementById('tour-add')?.value
  const typeMap = {
    –í–µ—Å–Ω–∞: 'spring',
    –û—Å–µ–Ω—å: 'autumn',
    –ó–∏–º–∞: 'winter',
    –õ–µ—Ç–æ: 'summer',
  }

  const type = typeMap[typeLabel] || 'spring'
  const year = document.getElementById('year-add')?.value
  const cost = document.getElementById('price')?.value

  // üìå –ö–ª–∞—Å—Å—ã
  const gradesSelect = document.getElementById('grades-add')
  const grades = Array.from(gradesSelect.selectedOptions).map((opt) =>
    parseInt(opt.value)
  )
  if (grades.length === 0) {
    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª–∞—Å—Å')
    return
  }

  // üìå –≠—Ç–∞–ø—ã
  const stepNames = document.querySelectorAll('.step-name-add')
    const dateRanges = document.querySelectorAll('.date-range-add')
    const stages = []

    for (let i = 0; i < stepNames.length; i++) {
      const range = dateRanges[i]?.value.split(' ‚Äî ')
      if (stepNames[i].value && range && range.length === 2 && range[0] && range[1]) {
        stages.push({
          name: stepNames[i].value,
          start_date: formatDate(range[0]),
          end_date: formatDate(range[1]),
        })
      }
    }

  console.log('‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ stages:', stages)


  // üìå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  const headerText = document.getElementById('title_certificate-add')?.value
  const signature1 = document.getElementById('sign-add')?.value.trim()
  const signature2 = document.getElementById('sign-add')?.value.trim()
  const background = document.getElementById('certificate-background')?.files[0]

  if (!background) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.')
    return
  }

  // üß© –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è
  formData.append('title', title)
  formData.append('type', type)
  formData.append('status', status)
  formData.append('year', year)
  formData.append('cost', cost)
  grades.forEach((g) => formData.append('grades', g))
  stages.forEach((stage, index) => {
    formData.append(`stages[${index}].name`, stage.name)
    formData.append(`stages[${index}].start_date`, stage.start_date)
    formData.append(`stages[${index}].end_date`, stage.end_date)
  })

  //  formData.append('certificate_template', JSON.stringify({
  //    header_text: headerText,
  //    signature_1: signature1,
  //    signature_2: signature2
  //  }));
  //
  //  formData.append('certificate_template.background', background);
  formData.append('certificate_template.header_text', headerText)
  formData.append('certificate_template.signature_1', signature1)
  formData.append('certificate_template.signature_2', signature2)
  formData.append('certificate_template.background', background)

  console.log('------ FORM DATA ------')
  for (let pair of formData.entries()) {
    console.log(`${pair[0]}:`, pair[1])
  }

  try {
    const res = await fetch(
      'https://portal.gradients.academy/olympiads/dashboard/',
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          // Content-Type –ù–ï —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é ‚Äî FormData —Å–∞–º –≤—ã—Å—Ç–∞–≤–∏—Ç
        },
        body: formData,
      }
    )

    if (!res.ok) {
      const error = await res.json()
      throw new Error(JSON.stringify(error))
    }

    alert('–û–ª–∏–º–ø–∏–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    toggleModal('modalAdd', false)
    await loadOlympiads() // –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã:', err)
    alert(`–û—à–∏–±–∫–∞: ${err.message}`)
  }
}

function formatDate(dateStr) {
  const [d, m, y] = dateStr.split('.')
  return `${y}-${m}-${d}`
}


function addStageBlock() {
  const template = document.getElementById('stage-template')
  if (!template) {
    console.error('–®–∞–±–ª–æ–Ω —ç—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    return
  }


  const clone = template.cloneNode(true)
  clone.removeAttribute('id') // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ID
  // –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
  clone.querySelectorAll('select, input').forEach(el => el.value = '')

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  template.parentElement.insertBefore(clone, template.nextSibling)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è flatpickr
  flatpickr(clone.querySelector('.date-range-add'), {
    mode: 'range',
    dateFormat: 'd.m.Y',
    locale: flatpickr.l10ns.ru,
  })
}


function addStageBlockEdit() {
  const template = document.getElementById('stage-template-edit')
  if (!template) {
    console.error('–®–∞–±–ª–æ–Ω —ç—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    return
  }


  const clone = template.cloneNode(true)
  clone.removeAttribute('id') // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ID
  // –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
  clone.querySelectorAll('select, input').forEach(el => el.value = '')

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  template.parentElement.insertBefore(clone, template.nextSibling)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è flatpickr
  flatpickr(clone.querySelector('.date-range-add'), {
    mode: 'range',
    dateFormat: 'd.m.Y',
    locale: flatpickr.l10ns.ru,
  })
}

document.querySelector('#modalAdd .btn-white').addEventListener('click', addStageBlock)
document.querySelector('#modalEdit .btn-white').addEventListener('click', addStageBlockEdit)


document
  .getElementById('certificate-background-edit')
  .addEventListener('change', function () {
    const file = this.files[0]
    const display = document.getElementById('file-name-edit')

    if (file) {
      const name = file.name
      const sizeKB = (file.size / 1024).toFixed(0) + ' KB'

      display.innerHTML = `
        <span class="text-orange-primary flex items-center gap-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m.75 12 3 3m0 0 3-3m-3 3v-6m-1.5-9H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
          </svg>
          ${name} (${sizeKB})
        </span>
      `
    } else {
      display.textContent = ''
    }
  })


async function updateOlympiadForm() {
  const token = localStorage.getItem('access_token')
  if (!token) {
    alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    return
  }

  const formData = new FormData()
  const title = document.getElementById('name-edit')?.value
  const status = document.getElementById('status-edit')?.value
  const typeLabel = document.getElementById('tour-edit')?.value
  const typeMap = {
    –í–µ—Å–Ω–∞: 'spring',
    –û—Å–µ–Ω—å: 'autumn',
    –ó–∏–º–∞: 'winter',
    –õ–µ—Ç–æ: 'summer',
  }
  const type = typeMap[typeLabel] || 'spring'
  const year = document.getElementById('year-edit')?.value
  const cost = document.getElementById('price')?.value
  const link = document.getElementById('link-edit')?.value
  const description = document.getElementById('disc-edit')?.value

  const gradesSelect = document.getElementById('grades-edit')
  const grades = Array.from(gradesSelect.selectedOptions).map(opt => parseInt(opt.value))
  if (grades.length === 0) {
    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª–∞—Å—Å')
    return
  }

  const stepNames = document.querySelectorAll('#modalEdit .step-name-add')
  const dateRanges = document.querySelectorAll('#modalEdit .date-range-add')
  const stages = []
  for (let i = 0; i < stepNames.length; i++) {
    const range = dateRanges[i]?.value.split(' ‚Äî ')
    if (stepNames[i].value && range && range.length === 2 && range[0] && range[1]) {
      stages.push({
        name: stepNames[i].value,
        start_date: formatDate(range[0]),
        end_date: formatDate(range[1]),
      })
    }
  }

  const headerText = document.getElementById('title_certificate-add')?.value
  const signature1 = document.getElementById('sign-edit1')?.value.trim()
  const signature2 = document.getElementById('sign-edit2')?.value.trim()
  const background = document.getElementById('certificate-background-edit')?.files[0]

  formData.append('title', title)
  formData.append('type', type)
  formData.append('status', status)
  formData.append('year', year)
  formData.append('cost', cost)
  formData.append('website', link)
  formData.append('description', description)
  grades.forEach(g => formData.append('grades', g))
  stages.forEach((stage, index) => {
    formData.append(`stages[${index}].name`, stage.name)
    formData.append(`stages[${index}].start_date`, stage.start_date)
    formData.append(`stages[${index}].end_date`, stage.end_date)
  })
  formData.append('certificate_template.header_text', headerText)
  formData.append('certificate_template.signature_1', signature1)
  formData.append('certificate_template.signature_2', signature2)
  if (background) {
    formData.append('certificate_template.background', background)
  }

  try {
    const res = await fetch(`https://portal.gradients.academy/olympiads/dashboard/${olympiadIdToDelete}`, {
      method: 'PUT',
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    })
    if (!res.ok) {
      const error = await res.json()
      throw new Error(JSON.stringify(error))
    }
    alert('–û–ª–∏–º–ø–∏–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    toggleModal('modalEdit', false)
    await loadOlympiads()
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã:', err)
    alert(`–û—à–∏–±–∫–∞: ${err.message}`)
  }
}