// participantsDistribution.js

// === 1) –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤: –º–µ—Ç–∫–∏ –∏–∑ <select> ‚Üí API-–∑–Ω–∞—á–µ–Ω–∏—è ===
const gradeMap = {
  '1 –∫–ª–∞—Å—Å': 'first',
  '2 –∫–ª–∞—Å—Å': 'second',
  '3 –∫–ª–∞—Å—Å': 'third',
  '4 –∫–ª–∞—Å—Å': 'fourth',
  '5 –∫–ª–∞—Å—Å': 'fifth',
  '6 –∫–ª–∞—Å—Å': 'sixth',
  '7 –∫–ª–∞—Å—Å': 'seventh',
  '8 –∫–ª–∞—Å—Å': 'eights',
  '9 –∫–ª–∞—Å—Å': 'nines',
  '10 –∫–ª–∞—Å—Å': 'tens',
  '11 –∫–ª–∞—Å—Å': 'elevens'
};

// === 2) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Chart.js-–∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ ===
let distributionChartInstance = null;
let dynamicsChartInstance = null;

// === 3) –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Å–∏ X (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ) ===
const FIXED_LABELS = ['0-20', '21-40', '41-60', '61-80', '81-100'];

// === 4) –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ===
let rankingCurrentPage = 1;
const rankingPageSize = 20;
let rankingTotalCount = 0;
let rankingTotalPages = 1;

// === 5) –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ===
let currentRankingData = [];      // –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let displayedRankingData = [];    // –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let currentSortKey = null;        // —Ç–µ–∫—É—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let currentSortAsc = true;        // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let currentNameFilter = '';       // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
let currentGradeFilter = '';      // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã

// ==================================================================================
//                      –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –®–ê–ü–ö–ò (HEADER)
// ==================================================================================

async function ensureUserAuthenticated() {
  let userData = localStorage.getItem('user');

  if (!userData) {
    console.warn('user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...');
    const newAccessToken = await refreshAccessToken();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç refreshAccessToken:', newAccessToken);

    if (!newAccessToken) {
      console.warn('refreshAccessToken –≤–µ—Ä–Ω—É–ª null. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /index.html');
      window.location.href = '/index.html';
      return null;
    }

    userData = localStorage.getItem('user');
    if (!userData) {
      console.warn('user –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –†–µ–¥–∏—Ä–µ–∫—Ç.');
      window.location.href = '/index.html';
      return null;
    }
  }

  const user = JSON.parse(userData);
  const role = user.profile?.role;
  if (role !== 'representative') {
    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é "${role}" –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ. –†–µ–¥–∏—Ä–µ–∫—Ç.`);
    window.location.href = '/index.html';
    return null;
  }

  return user;
}

function renderUserInfo(profile) {
  const avatarEl = document.getElementById('user-avatar');
  const nameEl = document.getElementById('user-name');
  const roleEl = document.getElementById('user-role');
  const welcomeEl = document.querySelector('h1.text-xl');

  const defaultAvatar = '/src/assets/images/user_logo.jpg';
  const imgPath = profile?.image;

  let finalAvatar = defaultAvatar;
  if (imgPath && typeof imgPath === 'string') {
    finalAvatar = imgPath.startsWith('http') ? imgPath : `https://portal.gradients.academy${imgPath}`;
  }

  if (avatarEl) avatarEl.src = finalAvatar;
  if (nameEl) nameEl.textContent = profile.full_name_ru || '';
  const firstName = profile.full_name_ru?.split(' ')[0] || '';
  if (welcomeEl) welcomeEl.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} üëã`;

  const countryCode = profile.country?.code || '';
  if (roleEl) roleEl.textContent = `–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å${countryCode ? ' ' + countryCode : ''}`;
}

async function loadRepresentativeProfileForHeader() {
  try {
    const res = await authorizedFetch('https://portal.gradients.academy/users/representative/profile/');
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è: ${res.status}`);
    const profile = await res.json();
    renderUserInfo(profile);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —à–∞–ø–∫–∏:', err);
  }
}

// ==================================================================================
//                    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è –ß–ê–†–¢–û–í (id="olympiad-filter")
// ==================================================================================

async function loadChartOlympiads() {
  try {
    let allOlympiads = [];
    let url = 'https://portal.gradients.academy/common/olympiads/';
    while (url) {
      const res = await authorizedFetch(url);
      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è —á–∞—Ä—Ç–æ–≤: ${res.status}`);
      }
      const json = await res.json();
      allOlympiads.push(...json.results);
      url = json.next;
    }
    fillChartOlympiadSelect(allOlympiads);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ loadChartOlympiads:', err);
  }
}

function fillChartOlympiadSelect(olympiads) {
  const select = document.getElementById('olympiad-filter');
  if (!select) return;
  select.innerHTML = '<option value="">–í—ã–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É (–¥–ª—è —á–∞—Ä—Ç–æ–≤)</option>';
  olympiads.forEach(o => {
    const option = document.createElement('option');
    option.value = o.id;
    option.textContent = o.title;
    select.appendChild(option);
  });
}

// ==================================================================================
//                    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è SUMMARY (id="summary-olympiad-filter")
// ==================================================================================

async function loadSummaryOlympiads() {
  try {
    let allOlympiads = [];
    let url = 'https://portal.gradients.academy/common/olympiads/';
    while (url) {
      const res = await authorizedFetch(url);
      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è summary: ${res.status}`);
      }
      const json = await res.json();
      allOlympiads.push(...json.results);
      url = json.next;
    }
    fillSummaryOlympiadSelect(allOlympiads);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ loadSummaryOlympiads:', err);
  }
}

function fillSummaryOlympiadSelect(olympiads) {
  const select = document.getElementById('summary-olympiad-filter');
  if (!select || olympiads.length === 0) return;
  select.innerHTML = '';
  olympiads.forEach((o, idx) => {
    const option = document.createElement('option');
    option.value = o.id;
    option.textContent = o.title;
    if (idx === 0) option.selected = true;
    select.appendChild(option);
  });
  // –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã
  loadOlympiadSummary(olympiads[0].id);
  loadOlympiadRanking(olympiads[0].id, 1);
}

// ==================================================================================
//                       –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
// ==================================================================================

async function loadDistributionData() {
  const gradeSelect = document.getElementById('grade-filter');
  const chartSelect = document.getElementById('olympiad-filter');
  if (!gradeSelect || !chartSelect) return;

  const gradeLabel = gradeSelect.value;
  const olympiadId = chartSelect.value;

  if (!gradeLabel || !olympiadId) {
    if (distributionChartInstance) {
      distributionChartInstance.destroy();
      distributionChartInstance = null;
    }
    return;
  }

  const gradeParam = gradeMap[gradeLabel];
  if (!gradeParam) return;

  try {
    const url = `https://portal.gradients.academy/results/representatives/dashboard/participants/distribution/?grade=${gradeParam}&olympiad_id=${olympiadId}`;
    const res = await authorizedFetch(url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ loadDistributionData: ${res.status}`);
    const data = await res.json();

    const distributionArray = Array.isArray(data) && data.length
      ? data[0].distribution
      : [];
    const counts = FIXED_LABELS.map((_, idx) => {
      const entry = distributionArray[idx];
      return entry ? entry.count : 0;
    });

    renderDistributionChart(FIXED_LABELS, counts);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ loadDistributionData:', err);
  }
}

function renderDistributionChart(labels, data) {
  const canvas = document.getElementById('participantsChart2');
  if (!canvas) return;
  const ctx = canvas.getContext('2d');

  if (distributionChartInstance) {
    distributionChartInstance.destroy();
  }

  distributionChartInstance = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels.map(l => l + ' %'),
      datasets: [{
        label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        data: data,
        backgroundColor: 'rgba(54, 162, 235, 1)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
        borderSkipped: false,
        borderRadius: { topLeft: 10, topRight: 10, bottomLeft: 10, bottomRight: 10 },
        barThickness: 25,
        maxBarThickness: 25
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: { grid: { display: false }, ticks: { autoSkip: false } },
        y: {
          beginAtZero: true,
          suggestedMax: 100,
          ticks: {
            callback: value => (value === 0 ? 0 : value + ' —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
          },
          stepSize: 20,
          precision: 0,
          autoSkip: false
        }
      },
      plugins: {
        legend: { display: false },
        tooltip: { mode: 'index', intersect: false }
      }
    }
  });
}

// ==================================================================================
//                         –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ ¬´–ª–∏–Ω–µ–π–Ω—ã–π¬ª —á–∞—Ä—Ç
// ==================================================================================

async function loadParticipantsDynamics() {
  try {
    const res = await authorizedFetch(
      'https://portal.gradients.academy/results/representatives/dashboard/participants/dynamics'
    );
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ loadParticipantsDynamics: ${res.status}`);
    const data = await res.json();

    const labels = data.map(d => d.year.toString());
    const values = data.map(d => d.count);

    renderDynamicsChart(labels, values);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ loadParticipantsDynamics:', err);
  }
}

function renderDynamicsChart(labels, values) {
  const canvas = document.getElementById('participantsChart');
  if (!canvas) return;
  const ctx = canvas.getContext('2d');

  if (dynamicsChartInstance) {
    dynamicsChartInstance.destroy();
  }

  dynamicsChartInstance = new Chart(ctx, {
    type: 'line',
    data: {
      labels,
      datasets: [{
        data: values,
        borderColor: '#10b981',
        backgroundColor: 'rgba(16, 185, 129, 0.08)',
        borderWidth: 1,
        pointRadius: 3,
        pointHoverRadius: 10,
        pointBackgroundColor: '#fff',
        tension: 0.6,
        fill: true,
        borderCapStyle: 'round',
        borderJoinStyle: 'round',
        pointStyle: 'circle'
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          suggestedMax: 100,
          ticks: { callback: value => (value === 0 ? 0 : `${value} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`) },
          stepSize: 20,
          precision: 0,
          autoSkip: false
        },
        x: { grid: { display: false }, ticks: { autoSkip: false } }
      },
      plugins: {
        legend: { display: false },
        tooltip: { mode: 'index', intersect: false }
      }
    }
  });
}

// ==================================================================================
//                      –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ summary-–∫–∞—Ä—Ç–æ—á–µ–∫ (–æ—Ç–¥–µ–ª—å–Ω–æ)
// ==================================================================================

const MONTH_NAMES = [
  '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
  '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
];

function formatDateRange(startIso, endIso) {
  const start = new Date(startIso);
  const end = new Date(endIso);
  const day1 = start.getDate();
  const month1 = MONTH_NAMES[start.getMonth()];
  const day2 = end.getDate();
  const month2 = MONTH_NAMES[end.getMonth()];
  const yearShort = String(end.getFullYear()).slice(-2);

  if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
    return `${day1}‚Äì${day2} ${month1} ${yearShort}–≥.`;
  } else {
    return `${day1} ${month1} ‚Äì ${day2} ${month2} ${yearShort}–≥.`;
  }
}

async function loadOlympiadSummary(olympiadId) {
  if (!olympiadId) {
    clearSummaryCards();
    return;
  }
  try {
    const url = `https://portal.gradients.academy/results/representative/dashboard/olympiads/${olympiadId}/summary`;
    const res = await authorizedFetch(url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ loadOlympiadSummary: ${res.status}`);
    const data = await res.json();
    fillSummaryCards(data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ loadOlympiadSummary:', err);
    clearSummaryCards();
  }
}

function clearSummaryCards() {
  const titleP = document.querySelector('#summary-title p.text-blue-primary');
  if (titleP) titleP.textContent = '';

  const datesP = document.querySelector('#summary-dates p.text-red-primary');
  if (datesP) datesP.textContent = '';

  const participantsP = document.querySelector('#summary-participants p.text-violet-primary');
  if (participantsP) participantsP.textContent = '';

  const avgScoreP = document.querySelector('#summary-avg-score p.text-orange-primary');
  if (avgScoreP) avgScoreP.textContent = '';
}

function fillSummaryCards(summary) {
  const titleP = document.querySelector('#summary-title p.text-blue-primary');
  if (titleP) {
    titleP.textContent = summary.title;
  }

  const datesP = document.querySelector('#summary-dates p.text-red-primary');
  if (datesP) {
    datesP.textContent = formatDateRange(summary.start_date, summary.end_date);
  }

  const participantsP = document.querySelector('#summary-participants p.text-violet-primary');
  if (participantsP) {
    participantsP.textContent = summary.participants_count;
  }

  const avgScoreP = document.querySelector('#summary-avg-score p.text-orange-primary');
  if (avgScoreP) {
    avgScoreP.textContent = summary.avg_score;
  }
}

// ==================================================================================
//                      –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–∞–±–ª–∏—Ü–∞) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π,
//                       —Ñ–∏–ª—å—Ç—Ä–æ–º, –ø–æ–∏—Å–∫–æ–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
// ==================================================================================

async function loadOlympiadRanking(olympiadId, page = 1) {
  const tbody = document.querySelector('.table-overall tbody');
  if (!tbody) return;
  tbody.innerHTML = '';

  if (!olympiadId) return;

  try {
    const url = `https://portal.gradients.academy/results/representative/dashboard/olympiads/${olympiadId}/ranking?page=${page}&page_size=${rankingPageSize}`;
    const res = await authorizedFetch(url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ loadOlympiadRanking: ${res.status}`);
    const json = await res.json();
    const data = json.results;
    rankingTotalCount = json.count;
    rankingTotalPages = Math.ceil(rankingTotalCount / rankingPageSize);
    rankingCurrentPage = page;

    // –û–±–Ω–æ–≤–ª—è–µ–º "–í—Å–µ–≥–æ X —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    const totalCountEl = document.getElementById('total-count');
    if (totalCountEl) {
      totalCountEl.textContent = `–í—Å–µ–≥–æ ${rankingTotalCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
    }

    currentRankingData = data;
    applyFiltersAndSorting();

    renderPaginationControls();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ loadOlympiadRanking:', err);
  }
}

function applyFiltersAndSorting() {
  let arr = currentRankingData.slice();

  // –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
  if (currentNameFilter.trim() !== '') {
    const needle = currentNameFilter.trim().toLowerCase();
    arr = arr.filter(item => item.full_name.toLowerCase().includes(needle));
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
  if (currentGradeFilter) {
    const gradeParam = gradeMap[currentGradeFilter];
    if (gradeParam) {
      arr = arr.filter(item => item.grade === gradeParam);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  if (currentSortKey) {
    arr.sort((a, b) => {
      let av = a[currentSortKey];
      let bv = b[currentSortKey];

      if (currentSortKey === 'global_rank' || currentSortKey === 'country_rank' ||
          currentSortKey === 'olympiad_score' || currentSortKey === 'total_score' ||
          currentSortKey === 'solved_tasks') {
        av = Number(av);
        bv = Number(bv);
      }

      if (typeof av === 'string') av = av.toLowerCase();
      if (typeof bv === 'string') bv = bv.toLowerCase();

      if (av < bv) return currentSortAsc ? -1 : 1;
      if (av > bv) return currentSortAsc ? 1 : -1;
      return 0;
    });
  }

  displayedRankingData = arr;
  renderRankingRows();
}

function renderRankingRows() {
  const tbody = document.querySelector('.table-overall tbody');
  if (!tbody) return;
  tbody.innerHTML = '';

  displayedRankingData.forEach((item, idx) => {
    const tr = document.createElement('tr');
    tr.classList.add('hover:bg-gray-50');

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
    const globalRankCell = document.createElement('td');
    globalRankCell.className = 'text-center';
    globalRankCell.textContent = item.global_rank;
    tr.appendChild(globalRankCell);

    // –†–∞–Ω–≥ –≤ —Å—Ç—Ä–∞–Ω–µ: –∫–æ—Ä–æ–Ω–∞ –¥–ª—è —Ç–æ–ø-3
    const countryRankCell = document.createElement('td');
    countryRankCell.className = 'text-center';
    countryRankCell.textContent = (idx < 3) ? 'üëë' : item.country_rank;
    tr.appendChild(countryRankCell);

    // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const nameCell = document.createElement('td');
    nameCell.textContent = item.full_name;
    tr.appendChild(nameCell);

    // –ö–ª–∞—Å—Å: –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ—Ç–∫—É
    const gradeCell = document.createElement('td');
    gradeCell.className = 'text-center';
    gradeCell.textContent = item.grade; // –ë—ã–ª–æ: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ gradeMap
    tr.appendChild(gradeCell);

    // –ë–∞–ª–ª—ã –∑–∞ –æ–ª–∏–º–ø–∏–∞–¥—É
    const scoreCell = document.createElement('td');
    scoreCell.className = 'text-center';
    scoreCell.textContent = item.olympiad_score;
    tr.appendChild(scoreCell);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç: solved_tasks/total_tasks
    const resultCell = document.createElement('td');
    resultCell.className = 'text-center';
    resultCell.textContent = `${item.solved_tasks}/${item.total_tasks}`;
    tr.appendChild(resultCell);

    // –û–±—â–∏–µ –ë–∞–ª–ª—ã
    const totalCell = document.createElement('td');
    totalCell.className = 'text-center';
    totalCell.textContent = item.total_score;
    tr.appendChild(totalCell);

    tbody.appendChild(tr);
  });
}

function renderPaginationControls() {
  const pagesContainer = document.getElementById('pagination-pages');
  const prevBtn = document.getElementById('pagination-prev');
  const nextBtn = document.getElementById('pagination-next');

  if (!pagesContainer || !prevBtn || !nextBtn) return;
  pagesContainer.innerHTML = '';

  const maxButtons = 5;
  let startPage = Math.max(1, rankingCurrentPage - Math.floor(maxButtons / 2));
  let endPage = Math.min(rankingTotalPages, startPage + maxButtons - 1);
  if (endPage - startPage < maxButtons - 1) {
    startPage = Math.max(1, endPage - maxButtons + 1);
  }

  for (let p = startPage; p <= endPage; p++) {
    const btn = document.createElement('button');
    btn.className = `px-3 py-1 ${p === rankingCurrentPage ? 'border-orange-primary text-orange-primary rounded border' : 'text-gray-600 hover:bg-gray-50'}`;
    btn.textContent = p;
    btn.addEventListener('click', () => {
      if (p !== rankingCurrentPage) {
        const summarySelect = document.getElementById('summary-olympiad-filter');
        if (summarySelect) {
          loadOlympiadRanking(summarySelect.value, p);
        }
      }
    });
    pagesContainer.appendChild(btn);
  }

  if (rankingCurrentPage <= 1) {
    prevBtn.disabled = true;
    prevBtn.classList.add('opacity-50', 'cursor-not-allowed');
  } else {
    prevBtn.disabled = false;
    prevBtn.classList.remove('opacity-50', 'cursor-not-allowed');
    prevBtn.onclick = () => {
      const summarySelect = document.getElementById('summary-olympiad-filter');
      if (summarySelect) {
        loadOlympiadRanking(summarySelect.value, rankingCurrentPage - 1);
      }
    };
  }

  if (rankingCurrentPage >= rankingTotalPages) {
    nextBtn.disabled = true;
    nextBtn.classList.add('opacity-50', 'cursor-not-allowed');
  } else {
    nextBtn.disabled = false;
    nextBtn.classList.remove('opacity-50', 'cursor-not-allowed');
    nextBtn.onclick = () => {
      const summarySelect = document.getElementById('summary-olympiad-filter');
      if (summarySelect) {
        loadOlympiadRanking(summarySelect.value, rankingCurrentPage + 1);
      }
    };
  }
}

// ==================================================================================
//                      –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ò–õ–¨–¢–†–û–í, –ü–û–ò–°–ö –ò –°–û–†–¢–ò–†–û–í–ö–ê
// ==================================================================================

document.getElementById('search-name')?.addEventListener('input', (e) => {
  currentNameFilter = e.target.value;
  applyFiltersAndSorting();
});

document.getElementById('filter-grade')?.addEventListener('change', (e) => {
  currentGradeFilter = e.target.value;
  applyFiltersAndSorting();
});

document.querySelectorAll('th[data-sort-key]').forEach(th => {
  th.addEventListener('click', () => {
    const key = th.getAttribute('data-sort-key');
    if (currentSortKey === key) {
      currentSortAsc = !currentSortAsc;
    } else {
      currentSortKey = key;
      currentSortAsc = true;
    }
    applyFiltersAndSorting();
  });
});

// ==================================================================================
//                           –°–ö–ê–ß–ò–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
// ==================================================================================

document.getElementById('download-ranking')?.addEventListener('click', async () => {
  const summarySelect = document.getElementById('summary-olympiad-filter');
  if (summarySelect) {
    const olyId = summarySelect.value;
    if (olyId) {
      try {
        const url = `https://portal.gradients.academy/results/representative/dashboard/olympiads/${olyId}/ranking/download`;
        const response = await authorizedFetch(url);
        
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${response.status}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const contentDisposition = response.headers.get('Content-Disposition');
        let filename = `ranking_${olyId}.xlsx`;
        if (contentDisposition) {
          const filenameMatch = contentDisposition.match(/filename="(.+)"/);
          if (filenameMatch) filename = filenameMatch[1];
        }

        // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(downloadUrl);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  }
});

// ==================================================================================
//                           –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ DOMContentLoaded
// ==================================================================================

document.addEventListener('DOMContentLoaded', async () => {
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —à–∞–ø–∫—É
  const user = await ensureUserAuthenticated();
  if (!user) return;
  renderUserInfo(user.profile);
  loadRepresentativeProfileForHeader();

  // 2. –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  loadParticipantsDynamics();

  // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è –ß–ê–†–¢–û–í –∏ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
  loadChartOlympiads();
  const chartSelect = document.getElementById('olympiad-filter');
  if (chartSelect) {
    chartSelect.addEventListener('change', () => {
      loadDistributionData();
    });
  }

  // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è SUMMARY –∏ —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
  loadSummaryOlympiads();
  const summarySelect = document.getElementById('summary-olympiad-filter');
  if (summarySelect) {
    summarySelect.addEventListener('change', function () {
      loadOlympiadSummary(this.value);
      loadOlympiadRanking(this.value, 1);
    });
  }

  // 5. –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ ¬´–∫–ª–∞—Å—Å¬ª (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
  const gradeSelect = document.getElementById('grade-filter');
  if (gradeSelect) {
    gradeSelect.addEventListener('change', loadDistributionData);
  }
});
