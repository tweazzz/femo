async function ensureUserAuthenticated() {
  let userData = localStorage.getItem('user')

  if (!userData) {
    console.warn(
      'user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...'
    )
    const newAccessToken = await refreshAccessToken()
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç refreshAccessToken:', newAccessToken)

    if (!newAccessToken) {
      console.warn(
        'refreshAccessToken –≤–µ—Ä–Ω—É–ª null. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login.html'
      )
      window.location.href = '/index.html'
      return null
    }

    userData = localStorage.getItem('user')
    if (!userData) {
      console.warn('user –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –†–µ–¥–∏—Ä–µ–∫—Ç.')
      window.location.href = '/index.html'
      return null
    }
  }

  const user = JSON.parse(userData)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
  const role = user.profile?.role
  if (role !== 'participant') {
    console.warn(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é "${role}" –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –†–µ–¥–∏—Ä–µ–∫—Ç.`
    )
    window.location.href = '/index.html'
    return null
  }

  return user
}

// 1) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function loadUserProfile() {
  const res = await authorizedFetch(
    'https://portal.femo.kz/api/users/participant/profile/'
  );
  if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
  return await res.json();
}

function renderUserInfo(profile) {
  const avatarEl   = document.getElementById('user-avatar');
  const nameEl     = document.getElementById('user-name');
  const roleEl     = document.getElementById('user-role');
  const welcomeEl  = document.querySelector('h1.text-xl');

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ: –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
  const imgPath = profile && profile.image ? profile.image : null;
  if (imgPath && typeof imgPath === 'string') {
    avatarEl.src = imgPath.startsWith('http')
      ? imgPath
      : `https://portal.femo.kz${imgPath}`;
  } else {
    // –≤—Å—Ç–∞–≤—å —Ç—É—Ç —Å–≤–æ–π –ø—É—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–µ –∏–ª–∏ –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    avatarEl.src = '/src/assets/images/default-avatar.png'; // <- –ø–æ–º–µ–Ω—è–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  // –ò–º—è (–±–µ—Ä—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ: —Ä—É—Å—Å–∫–æ–µ, –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ, –ª–∏–±–æ fallback)
  const fullNameRu = (profile && (profile.full_name_ru || profile.full_name_en || profile.full_name)) || '';
  nameEl.textContent = fullNameRu || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  // –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–¥–µ–ª—è–µ–º firstName
  const firstName = fullNameRu ? fullNameRu.split(' ')[0] : '–ü—Ä–∏–≤–µ—Ç';
  welcomeEl.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} üëã`;

  // –†–æ–ª—å
  roleEl.textContent = '–£—á–∞—Å—Ç–Ω–∏–∫';
}


document.addEventListener('DOMContentLoaded', async () => {
  const user = await ensureUserAuthenticated()
  if (!user) return

  // —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è
  let profile
  try {
    profile = await loadUserProfile()
  } catch (e) {
    console.error(e)
    return
  }
  renderUserInfo(profile)

  try {
    await loadOlympiadCards()
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err)
  }
})


function formatDate(dateStr) {
    const months = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    const date = new Date(dateStr);
    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();
    return `${day} ${month} ${year}`;
    }


async function loadOlympiadCards() {
  const token = localStorage.getItem('access_token');
  if (!token) {
    alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  try {
    const response = await authorizedFetch('https://portal.femo.kz/api/olympiads/participant/dashboard', {
      headers: { Authorization: `Bearer ${token}` }
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥: ${response.status}`);

    const data = await response.json();
    const container = document.querySelector('.grid');
    container.innerHTML = ''; // –æ—á–∏—Å—Ç–∏—Ç—å

    data.results.forEach(orig => {
      const olympiad = orig || {};

      // --- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
      let statusClass = '';
      if (olympiad.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' || olympiad.status === '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ') statusClass = 'bg-green-100 text-green-primary';
      else if (olympiad.status === '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞') statusClass = 'bg-orange-100 text-orange-primary';
      else if (olympiad.status === '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å') statusClass = 'bg-red-100 text-red-primary';
      else if (olympiad.status === '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è') statusClass = 'bg-grey-100 text-grey-primary';

      let dateInfoText = '';
      let dateInfo = '';
      const startDate = olympiad.first_start_date ? new Date(olympiad.first_start_date) : null;
      const endDate = olympiad.last_end_date ? new Date(olympiad.last_end_date) : null;

      if (olympiad.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
        dateInfoText = '–î–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã';
        dateInfo = (startDate && endDate) ? `${formatDate(olympiad.first_start_date)} - ${formatDate(olympiad.last_end_date)}` : '‚Äî';
      } else if (olympiad.status === '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞' || olympiad.status === '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å') {
        dateInfoText = '–û—Å—Ç–∞–ª–æ—Å—å';
        if (olympiad.time_left) {
          dateInfo = olympiad.time_left;
        } else if (endDate) {
          const daysLeft = Math.max(0, Math.round((endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)));
          dateInfo = `${daysLeft} –¥–Ω–µ–π`;
        } else {
          dateInfo = '‚Äî';
        }
      } else if (olympiad.status === '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è') {
        dateInfoText = '–û—Ç–∫—Ä–æ–µ—Ç—Å—è';
        dateInfo = startDate ? formatDate(olympiad.first_start_date) : '‚Äî';
      } else if (olympiad.status === '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ') {
        dateInfoText = '–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è';
        dateInfo = startDate ? formatDate(olympiad.first_start_date) : '‚Äî';
      } else {
        dateInfoText = '';
        dateInfo = olympiad.time_left || '';
      }

      // --- —Ç–µ–∫—Å—Ç—ã / –∏–∫–æ–Ω–∫–∏ ---
      const buttonText = olympiad.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' ? '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';
      const completedIcon = `
        <svg width="12" height="12" viewBox="0 0 12 12" fill="none"
             xmlns="http://www.w3.org/2000/svg" class="inline-block">
          <path d="M6 11C8.75 11 11 8.75 11 6C11 3.25 8.75 1 6 1C3.25 1 1 3.25 1 6C1 8.75 3.25 11 6 11Z"
                stroke="#0DB459" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M3.875 5.99996L5.29 7.41496L8.125 4.58496"
                stroke="#0DB459" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>`;
      const useVuesaxIcon = ['–ó–∞–≤–µ—Ä—à–µ–Ω–∞', '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è'].includes(olympiad.status);
      const iconHTML = useVuesaxIcon
        ? `<img src="/src/assets/images/vuesax.svg" alt="vuesax" class="mb-1 inline-block size-5" />`
        : `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="mb-1 inline-block size-5">
             <path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm.75-13a.75.75 0 0 0-1.5 0v5c0 .414.336.75.75.75h4a.75.75 0 0 0 0-1.5h-3.25V5Z" clip-rule="evenodd"/>
           </svg>`;

      // --- –∫–Ω–æ–ø–∫–∏: –¥–≤–µ –≤–µ—Ä—Å–∏–∏ detail (–±–µ–ª–∞—è/–æ—Ä–∞–Ω–∂–µ–≤–∞—è) ---
      // detail –±–µ–ª–∞—è (–ü–æ–¥—Ä–æ–±–Ω–µ–µ) ‚Äî –±–µ–ª—ã–π —Ñ–æ–Ω, –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ç–µ–∫—Å—Ç
      const detailWhiteHTML = `<a href="${olympiad.url || '#'}" class="inline-flex items-center justify-center px-4 py-2 rounded-lg text-sm font-medium border border-orange-primary bg-white text-orange-primary min-w-[120px] whitespace-nowrap">${buttonText}</a>`;
      // detail –æ—Ä–∞–Ω–∂–µ–≤–∞—è (–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã) ‚Äî –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
      const detailOrangeHTML = `<a href="${olympiad.url || '#'}" class="inline-flex items-center justify-center px-4 py-2 rounded-lg text-sm font-medium bg-orange-primary text-white min-w-[140px] whitespace-nowrap">${buttonText}</a>`;

      // register / start –∫–Ω–æ–ø–∫–∏ (–æ—Ä–∞–Ω–∂–µ–≤—ã–µ –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç)
      const registerHref = `/participant/payments.html?olympiad=${encodeURIComponent(olympiad.id)}`;
      const registerButtonHTML = `<a href="${registerHref}" class="inline-flex items-center justify-center px-4 py-2 rounded-lg text-sm font-medium bg-orange-primary text-white min-w-[140px] whitespace-nowrap">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>`;
      const startButtonHTML = `<a href="/participant/tasks.html" class="inline-flex items-center justify-center px-4 py-2 rounded-lg text-sm font-medium bg-orange-primary text-white min-w-[140px] whitespace-nowrap">–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å</a>`;

      // --- —Ä–µ—à–∞–µ–º –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ---
      let buttonsHTML = '';

      if (olympiad.status === '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å') {
        if (olympiad.registered === true) {
          // —Ç–æ–ª—å–∫–æ "–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å"
          buttonsHTML = `<div class="flex items-center gap-3">${startButtonHTML}</div>`;
        } else {
          // "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" (–æ–±—ã—á–Ω–æ –±–µ–ª–∞—è) + "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
          buttonsHTML = `<div class="flex items-center gap-3">${detailWhiteHTML}${registerButtonHTML}</div>`;
        }
      } else if (olympiad.status === '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞' || olympiad.status === '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è') {
        // upcoming-like: detail (white) –∏, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, register
        if (olympiad.registered === false) {
          buttonsHTML = `<div class="flex items-center gap-3">${detailWhiteHTML}${registerButtonHTML}</div>`;
        } else {
          buttonsHTML = `<div class="flex items-center gap-3">${detailWhiteHTML}</div>`;
        }
      } else if (olympiad.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
        // –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" (–æ—Ä–∞–Ω–∂–µ–≤–∞—è)
        buttonsHTML = `<div class="flex items-center gap-3">${detailOrangeHTML}</div>`;
      } else {
        // –ø—Ä–æ—á–∏–µ —Å—Ç–∞—Ç—É—Å—ã: –ø—Ä–æ—Å—Ç–æ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" (white)
        buttonsHTML = `<div class="flex items-center gap-3">${detailWhiteHTML}</div>`;
      }

      // --- —Å–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ---
      const card = document.createElement('div');
      card.className = 'border-default flex flex-col justify-between rounded-xl bg-white p-4 min-h-[220px]';

      card.innerHTML = `
        <div>
          <div class="${statusClass} mb-2 w-fit rounded-full px-2 py-1 text-xs flex items-center gap-1">
            ${olympiad.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' ? completedIcon : ''} 
            ${olympiad.status || ''}
          </div>
          <h3 class="mb-1 text-lg font-semibold break-words">${olympiad.title || ''}</h3>
          <p class="text-gray-primary mb-3 text-sm leading-relaxed whitespace-normal">–¢—É—Ä: ${olympiad.tour_type || ''}</p>
        </div>

        <div>
          <div class="mb-4">
            <span class="text-gray-secondary mb-1 text-xs">${dateInfoText}</span>
            <p class="text-black-primary text-sm flex items-center gap-1 leading-relaxed whitespace-normal">
              ${iconHTML} ${dateInfo}
            </p>
          </div>

          ${buttonsHTML}
        </div>
      `;

      container.appendChild(card);
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥:', error);
  }
}

