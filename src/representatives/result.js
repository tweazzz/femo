async function ensureUserAuthenticated() {
  let userData = localStorage.getItem('user')

  if (!userData) {
    console.warn(
      'user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...'
    )
    const newAccessToken = await refreshAccessToken()
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç refreshAccessToken:', newAccessToken)

    if (!newAccessToken) {
      console.warn(
        'refreshAccessToken –≤–µ—Ä–Ω—É–ª null. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login.html'
      )
      window.location.href = '/index.html'
      return null
    }

    userData = localStorage.getItem('user')
    if (!userData) {
      console.warn('user –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –†–µ–¥–∏—Ä–µ–∫—Ç.')
      window.location.href = '/index.html'
      return null
    }
  }

  const user = JSON.parse(userData)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
  const role = user.profile?.role
  if (role !== 'representative') {
    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é "${role}" –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ. –†–µ–¥–∏—Ä–µ–∫—Ç.`)
    window.location.href = '/index.html'
    return null
  }

  return user
}

let participantProfile = null; 

function renderUserInfo(profile) {
  const avatarEl  = document.getElementById('user-avatar');
  const nameEl    = document.getElementById('user-name');
  const roleEl    = document.getElementById('user-role');
  const welcomeEl = document.querySelector('h1.text-xl');

  // --- –∞–≤–∞—Ç–∞—Ä, –∏–º—è, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–∫–∞–∫ –±—ã–ª–æ) ---
  const defaultAvatar = '/src/assets/images/user_logo.jpg';
  const imgPath       = profile?.image;
  let finalAvatar = defaultAvatar;
  if (imgPath && typeof imgPath === 'string') {
    finalAvatar = imgPath.startsWith('http')
      ? imgPath
      : `https://portal.gradients.academy${imgPath}`;
  }
  avatarEl.src        = finalAvatar;
  nameEl.textContent  = profile.full_name_ru || '';
  const firstName     = profile.full_name_ru?.split(' ')[0] || '';
  welcomeEl.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} üëã`;

  // --- —Ä–æ–ª—å + —Ñ–ª–∞–≥ ---
  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  roleEl.innerHTML = '';

  // –°–ø–∞–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  const span = document.createElement('span');
  span.textContent = '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å';
  // inline-block –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏
  span.className = 'inline-block align-middle';
  roleEl.appendChild(span);

  // –§–ª–∞–≥, –µ—Å–ª–∏ –µ—Å—Ç—å
  const country = profile.country;
  if (country?.code) {
    const code    = country.code.toLowerCase();
    const flagUrl = `https://flagcdn.com/16x12/${code}.png`;
    const img = document.createElement('img');
    img.src       = flagUrl;
    img.alt       = `–§–ª–∞–≥ ${country.name}`;
    // inline-block, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏, –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
    img.className = 'inline-block align-middle ml-1';
    roleEl.appendChild(img);
  }
}

async function loadRepresentativeProfileForHeader() {
  try {
    const res = await authorizedFetch('https://portal.gradients.academy/api/users/representative/profile/');
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è: ${res.status}`);

    const profile = await res.json();
    renderUserInfo(profile);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —à–∞–ø–∫–∏:', err);
  }
}

let dynamicsChartInstance = null;

async function loadParticipantsDynamics() {
  try {
    const res = await authorizedFetch('https://portal.gradients.academy/api/results/representatives/dashboard/participants/dynamics');
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏: ${res.status}`);

    const data = await res.json();

    const labels = data.map(d => d.year.toString());
    const values = data.map(d => d.count);

    renderDynamicsChart(labels, values);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–Ω–∞–º–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
  }
}

function renderDynamicsChart(labels, values) {
  const ctx = document.getElementById('participantsChart').getContext('2d');

  if (dynamicsChartInstance) {
    dynamicsChartInstance.destroy();
  }

  dynamicsChartInstance = new Chart(ctx, {
    type: 'line',
    data: {
      labels,
      datasets: [{
        data: values,
        borderColor: '#10b981',
        backgroundColor: 'rgba(16, 185, 129, 0.08)',
        borderWidth: 1,
        pointRadius: 3,
        pointHoverRadius: 10,
        pointBackgroundColor: '#fff',
        tension: 0.6,
        fill: true,
        borderCapStyle: 'round',
        borderJoinStyle: 'round',
        pointStyle: 'circle',
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          suggestedMax: 100,
          ticks: {
            callback: (value) => value === 0 ? 0 : `${value} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`
          },
          stepSize: 20,
          precision: 0,
          autoSkip: false,
        },
        x: {
          grid: { display: false },
          ticks: { autoSkip: false },
        },
      },
      plugins: {
        legend: { display: false },
        tooltip: {
          mode: 'index',
          intersect: false,
        }
      }
    }
  });
}
async function loadParticipantsSummary() {
  try {
    const res = await authorizedFetch(
      'https://portal.gradients.academy/api/results/representatives/dashboard/participants/summary'
    );
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ summary: ${res.status}`);

    const summary = await res.json();

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    document.getElementById('summary-avg-score').textContent =
      summary.avg_total_score ?? '‚Äî';

    document.getElementById('summary-above-half').textContent =
      `${summary.above_half.count} (${summary.above_half.percent}%)`;

    document.getElementById('summary-top100').textContent =
      `${summary.top100_count.country} –∏–∑ ${summary.top100_count.global}`;

    document.getElementById('summary-tasks-percent').textContent =
      `${summary.tasks_completion_percent}%`;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ summary –¥–∞–Ω–Ω—ã—Ö:', err);
  }
}

let chartInstance = null;

// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤

async function loadDistributionOptions() {
  try {
    const res = await authorizedFetch(
      'https://portal.gradients.academy/api/results/representatives/dashboard/participants/distribution/'
    );
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
    const data = await res.json();

    const olympiadsMap = new Map();
    const gradesSet = new Set();

    data.forEach(entry => {
      olympiadsMap.set(entry.olympiad.id, entry.olympiad.title);
      gradesSet.add(entry.grade);
    });

    fillOlympiadSelect(Array.from(olympiadsMap.entries()));
    fillGradeSelect(Array.from(gradesSet));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', err);
  }
}

// 2. –ó–∞–ø–æ–ª–Ω—è–µ–º select –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ (–±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞)

function fillGradeSelect(grades) {
  const select = document.getElementById('grade-filter');
  select.innerHTML = '<option value="">–í—Å–µ –∫–ª–∞—Å—Å—ã</option>';

  grades.forEach(grade => {
    const option = document.createElement('option');
    option.value = grade;
    option.textContent = grade;
    select.appendChild(option);
  });
}

// 3. –ó–∞–ø–æ–ª–Ω—è–µ–º select –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥
function fillOlympiadSelect(olympiads) {
  const select = document.getElementById('olympiad-filter');
  select.innerHTML = '<option value="">–í—ã–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É</option>';

  olympiads.forEach(([id, title]) => {
    const option = document.createElement('option');
    option.value = id;
    option.textContent = title;
    select.appendChild(option);
  });
}

// 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
async function loadDistributionData() {
  const olympiadId = document.getElementById('olympiad-filter').value;
  const grade = document.getElementById('grade-filter').value;

  if (!olympiadId || !grade) return;

  try {
    const url = `https://portal.gradients.academy/api/results/representatives/dashboard/participants/distribution/?grade=${grade}&olympiad_id=${olympiadId}`;
    const res = await authorizedFetch(url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);

    const data = await res.json();
    const counts = Array.isArray(data) && data.length
    ? data[0].distribution.map(d => d.count)
    : [];

    renderChart(counts);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', err);
  }
}

// 5. –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä–∞—Ñ–∏–∫
function renderChart(data) {
  const ctx = document.getElementById('participantsChart2').getContext('2d');

  if (chartInstance) chartInstance.destroy();

  chartInstance = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['0-20%', '21-40%', '41-60%', '61-80%', '81-100%'],
      datasets: [{
        label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        data,
        backgroundColor: 'rgba(54, 162, 235, 1)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
        borderRadius: 10,
        barThickness: 25,
        maxBarThickness: 25,
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: { grid: { display: false } },
        y: {
          beginAtZero: true,
          suggestedMax: 100,
          ticks: {
            callback: val => val === 0 ? 0 : `${val} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`
          },
          stepSize: 20,
          precision: 0
        }
      },
      plugins: {
        legend: { display: false },
        tooltip: { mode: 'index', intersect: false }
      }
    }
  });
}

let currentResults = []        // –º–∞—Å—Å–∏–≤ —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const sortDirections = {}      // —Ö—Ä–∞–Ω–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
let currentPage = 1
let currentSearch = ''
let currentGrade = ''
let searchTimer = null

document.addEventListener('DOMContentLoaded', async () => {

  // 1) –í–µ—à–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
  const searchInput = document.querySelector('.search-input')
  const gradeSelect = document.querySelector('.grade-select')
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const user = await ensureUserAuthenticated()
  if (!user) {
    return // ensureUserAuthenticated —Å–∞–º —Å–¥–µ–ª–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
  }

  // 2. –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–ø–∫—É
  renderUserInfo(user.profile)

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (debounce 300 –º—Å)
  searchInput.addEventListener('input', () => {
    clearTimeout(searchTimer)
    searchTimer = setTimeout(() => {
      currentSearch = searchInput.value.trim()
      loadParticipantRanking(1)
    }, 300)
  })
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
  gradeSelect.addEventListener('change', () => {
    currentGrade = gradeSelect.value
    loadParticipantRanking(1)
  })
  // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
  document.getElementById('grade-filter')
    .addEventListener('change', loadDistributionData)
  document.getElementById('olympiad-filter')
    .addEventListener('change', loadDistributionData)

  // 4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≥—Ä—É–∑–∏–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
  loadRepresentativeProfileForHeader()
  loadParticipantsDynamics()
  loadParticipantsSummary()
  loadDistributionOptions()

  // 5. –ì—Ä—É–∑–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞
  await loadParticipantRanking(1)

  // 6. –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ currentResults —É–∂–µ –µ—Å—Ç—å)
  initSorting()
})

/** –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */
async function loadParticipantRanking(page = 1) {
  currentPage = page
  const tbody = document.querySelector('.table-overall tbody')
  const countEl = document.querySelector('.pagination-info')
  const pagesContainer = document.querySelector('.pagination-pages')
  const prevBtn = document.querySelector('.pagination-prev')
  const nextBtn = document.querySelector('.pagination-next')

  if (!tbody) return

  tbody.innerHTML = ''
  if (pagesContainer) pagesContainer.innerHTML = ''

  try {
    // –°–æ–±–∏—Ä–∞–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const params = new URLSearchParams()
    params.set('page', page)
    if (currentSearch) params.set('search', currentSearch)
    if (currentGrade) params.set('grade', currentGrade)

    const url = `https://portal.gradients.academy/api/results/representatives/dashboard/participants/ranking/?${params.toString()}`
    const res = await authorizedFetch(url)
    if (!res || !res.ok) {
      console.error(`–û—à–∏–±–∫–∞ ${res?.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞`)
      return
    }

    const { count, next, previous, results } = await res.json()
    currentResults = results
    renderTableBody(results)

    // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    countEl && (countEl.textContent = `–í—Å–µ–≥–æ ${count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
    if (pagesContainer) {
      const totalPages = Math.ceil(count / 20)
      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button')
        btn.textContent = i
        btn.className = i === page
          ? 'border-orange-primary text-orange-primary rounded border-1 px-3 py-1'
          : 'text-gray-600 hover:bg-gray-50 px-3 py-1'
        btn.onclick = () => loadParticipantRanking(i)
        pagesContainer.appendChild(btn)
      }
    }
    if (prevBtn) prevBtn.disabled = !previous, prevBtn.onclick = () => previous && loadParticipantRanking(page - 1)
    if (nextBtn) nextBtn.disabled = !next,     nextBtn.onclick = () => next && loadParticipantRanking(page + 1)
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', err)
  }
}
const reverseClassMap = {
  first: 1,
  second: 2,
  third: 3,
  fourth: 4,
  fifth: 5,
  sixth: 6,
  seventh: 7,
  eighth: 8,
  ninth: 9,
  tenth: 10,
  eleventh: 11,
  twelfth: 12,
}
function renderTableBody(data) {
  const tbody = document.querySelector('.table-overall tbody')
  tbody.innerHTML = ''
  data.forEach(p => {
    const tr = document.createElement('tr')
    tr.className = 'hover:bg-gray-50'
    tr.innerHTML = `
      <td class="text-center">${p.rank}</td>
      <td class="text-center">${p.country_rank}</td>
      <td>${p.full_name}</td>
      <td class="text-center">${reverseClassMap[p.grade] || '‚Äî'}</td>
      <td class="text-center">${p.olympiad_score ?? 0}</td>
      <td class="text-center">${p.task_score ?? 0}</td>
      <td class="text-center">${p.total_score ?? 0}</td>
    `
    tbody.appendChild(tr)
  })
}

/** –ù–∞–≤–µ—à–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≤—Å–µ th.sortable */
function initSorting() {
  document.querySelectorAll('.table-overall thead th.sortable').forEach(th => {
    const field = th.dataset.field
    if (!field) return
    sortDirections[field] = 'asc'
    th.style.cursor = 'pointer'
    th.addEventListener('click', () => {
      const dir = sortDirections[field] === 'asc' ? 'desc' : 'asc'
      sortDirections[field] = dir
      sortAndRender(field, dir)
      updateHeaderIndicators(field, dir)
    })
  })
}

/** –°–æ—Ä—Ç–∏—Ä—É–µ–º currentResults –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∏—Ö */
function sortAndRender(field, dir) {
  const sorted = [...currentResults].sort((a, b) => {
    const aV = a[field] ?? 0
    const bV = b[field] ?? 0
    if (typeof aV === 'string') {
      return dir === 'asc' ? aV.localeCompare(bV) : bV.localeCompare(aV)
    }
    return dir === 'asc' ? aV - bV : bV - aV
  })
  renderTableBody(sorted)
}

/** –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ */
function updateHeaderIndicators(activeField, dir) {
  document.querySelectorAll('.table-overall thead th.sortable').forEach(th => {
    const icon = th.querySelector('svg.size-4')
    if (!icon) return
    if (th.dataset.field === activeField) {
      icon.style.transform = dir === 'asc' ? 'rotate(180deg)' : 'rotate(0deg)'
      icon.style.transition = 'transform .2s'
    } else {
      icon.style.transform = ''
    }
  })
}


// –°—Ä–∞–∑—É –ø–æ—Å–ª–µ initSorting() –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ DOMContentLoaded:
document.getElementById('download-btn')?.addEventListener('click', async () => {
  try {
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ —Ñ–∞–π–ª–æ–º
    const res = await authorizedFetch(
      'https://portal.gradients.academy/api/results/representatives/dashboard/participants/ranking/download'
    );
    if (!res || !res.ok) {
      throw new Error(`Download error: ${res?.status}`);
    }

    // –ø–æ–ª—É—á–∞–µ–º blob –∏ —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const blob = await res.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;

    // –ú–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∏–º—è
    a.download = 'ranking.csv';  // –∏–ª–∏ .xlsx, –∫–∞–∫ –≤–µ—Ä–Ω—ë—Ç –±—ç–∫–µ–Ω–¥
    document.body.appendChild(a);
    a.click();

    // —á–∏—Å—Ç–∏–º
    a.remove();
    window.URL.revokeObjectURL(url);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});
